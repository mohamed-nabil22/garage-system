
Garagesystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000212c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  0000212c  000021c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000ca  008000ca  0000222a  2**0
                  ALLOC
  3 .stab         00001e54  00000000  00000000  0000222c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e9a  00000000  00000000  00004080  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000505a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000051ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009667  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3c       	cpi	r26, 0xCC	; 204
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <main>
      8a:	0c 94 94 10 	jmp	0x2128	; 0x2128 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ea       	ldi	r26, 0xAB	; 171
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ea       	ldi	r24, 0xAB	; 171
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 85 10 	jmp	0x210a	; 0x210a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER_voidInit>:


void (* TIMER_pvTimer0NotificationFunction)(void) = NULL_POINTER; 

void TIMER_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Set Timer 0 in CTC Mode*/
	CLR_BIT(TCCR0, TCCR0_WGM00);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_WGM01);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24
	
	/*Set The Prescaler to be 8*/
	CLR_BIT(TCCR0, TCCR0_CS00);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8e 7f       	andi	r24, 0xFE	; 254
     b76:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS01);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	82 60       	ori	r24, 0x02	; 2
     b84:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS02);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8b 7f       	andi	r24, 0xFB	; 251
     b92:	8c 93       	st	X, r24
	
	/*Enable Output Compare Interrupt*/
	SET_BIT(TIMSK, TIMSK_OCIE0);
     b94:	a9 e5       	ldi	r26, 0x59	; 89
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e9 e5       	ldi	r30, 0x59	; 89
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <TIMER_voidSetPreLoadValue0>:

void TIMER_voidSetPreLoadValue0(u8 Copy_u8PreLoadValue)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	0f 92       	push	r0
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8PreLoadValue;
     bb4:	e2 e5       	ldi	r30, 0x52	; 82
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	80 83       	st	Z, r24
}
     bbc:	0f 90       	pop	r0
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <TIMER_voidSetCompareValue0>:


void TIMER_voidSetCompareValue0(u8 Copy_u8CompareValue)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Compare Value to the OCR0 Register*/
	OCR0 = Copy_u8CompareValue;
     bd0:	ec e5       	ldi	r30, 0x5C	; 92
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	80 83       	st	Z, r24
}
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <TIMER_voidTimer0SetCallBack>:

void TIMER_voidTimer0SetCallBack(void (*Copy_pvNotificationFunction)(void))
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <TIMER_voidTimer0SetCallBack+0x6>
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	89 83       	std	Y+1, r24	; 0x01
	/*Assign the function address to the global pointer to function*/
	TIMER_pvTimer0NotificationFunction = Copy_pvNotificationFunction;
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	90 93 cb 00 	sts	0x00CB, r25
     bf6:	80 93 ca 00 	sts	0x00CA, r24
}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <__vector_10>:


void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
     c04:	1f 92       	push	r1
     c06:	0f 92       	push	r0
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	0f 92       	push	r0
     c0c:	11 24       	eor	r1, r1
     c0e:	2f 93       	push	r18
     c10:	3f 93       	push	r19
     c12:	4f 93       	push	r20
     c14:	5f 93       	push	r21
     c16:	6f 93       	push	r22
     c18:	7f 93       	push	r23
     c1a:	8f 93       	push	r24
     c1c:	9f 93       	push	r25
     c1e:	af 93       	push	r26
     c20:	bf 93       	push	r27
     c22:	ef 93       	push	r30
     c24:	ff 93       	push	r31
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
	/*Check if the global pointer to function is changed or not*/
	if(TIMER_pvTimer0NotificationFunction != NULL_POINTER)
     c2e:	80 91 ca 00 	lds	r24, 0x00CA
     c32:	90 91 cb 00 	lds	r25, 0x00CB
     c36:	00 97       	sbiw	r24, 0x00	; 0
     c38:	29 f0       	breq	.+10     	; 0xc44 <__vector_10+0x40>
	{
		/*Execute the global pointer to function*/
		TIMER_pvTimer0NotificationFunction();
     c3a:	e0 91 ca 00 	lds	r30, 0x00CA
     c3e:	f0 91 cb 00 	lds	r31, 0x00CB
     c42:	09 95       	icall
	}
}
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	ff 91       	pop	r31
     c4a:	ef 91       	pop	r30
     c4c:	bf 91       	pop	r27
     c4e:	af 91       	pop	r26
     c50:	9f 91       	pop	r25
     c52:	8f 91       	pop	r24
     c54:	7f 91       	pop	r23
     c56:	6f 91       	pop	r22
     c58:	5f 91       	pop	r21
     c5a:	4f 91       	pop	r20
     c5c:	3f 91       	pop	r19
     c5e:	2f 91       	pop	r18
     c60:	0f 90       	pop	r0
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	0f 90       	pop	r0
     c66:	1f 90       	pop	r1
     c68:	18 95       	reti

00000c6a <DIO_voidSetPinDirection>:
#include "DIO_config.h"



void DIO_voidSetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinMode)
{
     c6a:	df 93       	push	r29
     c6c:	cf 93       	push	r28
     c6e:	00 d0       	rcall	.+0      	; 0xc70 <DIO_voidSetPinDirection+0x6>
     c70:	00 d0       	rcall	.+0      	; 0xc72 <DIO_voidSetPinDirection+0x8>
     c72:	0f 92       	push	r0
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	89 83       	std	Y+1, r24	; 0x01
     c7a:	6a 83       	std	Y+2, r22	; 0x02
     c7c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	3d 83       	std	Y+5, r19	; 0x05
     c86:	2c 83       	std	Y+4, r18	; 0x04
     c88:	8c 81       	ldd	r24, Y+4	; 0x04
     c8a:	9d 81       	ldd	r25, Y+5	; 0x05
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	91 05       	cpc	r25, r1
     c90:	09 f4       	brne	.+2      	; 0xc94 <DIO_voidSetPinDirection+0x2a>
     c92:	43 c0       	rjmp	.+134    	; 0xd1a <DIO_voidSetPinDirection+0xb0>
     c94:	2c 81       	ldd	r18, Y+4	; 0x04
     c96:	3d 81       	ldd	r19, Y+5	; 0x05
     c98:	22 30       	cpi	r18, 0x02	; 2
     c9a:	31 05       	cpc	r19, r1
     c9c:	2c f4       	brge	.+10     	; 0xca8 <DIO_voidSetPinDirection+0x3e>
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	9d 81       	ldd	r25, Y+5	; 0x05
     ca2:	00 97       	sbiw	r24, 0x00	; 0
     ca4:	71 f0       	breq	.+28     	; 0xcc2 <DIO_voidSetPinDirection+0x58>
     ca6:	bc c0       	rjmp	.+376    	; 0xe20 <DIO_voidSetPinDirection+0x1b6>
     ca8:	2c 81       	ldd	r18, Y+4	; 0x04
     caa:	3d 81       	ldd	r19, Y+5	; 0x05
     cac:	22 30       	cpi	r18, 0x02	; 2
     cae:	31 05       	cpc	r19, r1
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <DIO_voidSetPinDirection+0x4a>
     cb2:	5f c0       	rjmp	.+190    	; 0xd72 <DIO_voidSetPinDirection+0x108>
     cb4:	8c 81       	ldd	r24, Y+4	; 0x04
     cb6:	9d 81       	ldd	r25, Y+5	; 0x05
     cb8:	83 30       	cpi	r24, 0x03	; 3
     cba:	91 05       	cpc	r25, r1
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <DIO_voidSetPinDirection+0x56>
     cbe:	85 c0       	rjmp	.+266    	; 0xdca <DIO_voidSetPinDirection+0x160>
     cc0:	af c0       	rjmp	.+350    	; 0xe20 <DIO_voidSetPinDirection+0x1b6>
	{
		case PORTA:
			if(Copy_u8PinMode == DIO_INPUT)
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	88 23       	and	r24, r24
     cc6:	a9 f4       	brne	.+42     	; 0xcf2 <DIO_voidSetPinDirection+0x88>
			{
				CLR_BIT(DIO_DDRA, Copy_u8PinNumber);
     cc8:	aa e3       	ldi	r26, 0x3A	; 58
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	ea e3       	ldi	r30, 0x3A	; 58
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 2e       	mov	r0, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_voidSetPinDirection+0x7c>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	0a 94       	dec	r0
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <DIO_voidSetPinDirection+0x78>
     cea:	80 95       	com	r24
     cec:	84 23       	and	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	97 c0       	rjmp	.+302    	; 0xe20 <DIO_voidSetPinDirection+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRA, Copy_u8PinNumber);
     cf2:	aa e3       	ldi	r26, 0x3A	; 58
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ea e3       	ldi	r30, 0x3A	; 58
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_voidSetPinDirection+0xa6>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_voidSetPinDirection+0xa2>
     d14:	84 2b       	or	r24, r20
     d16:	8c 93       	st	X, r24
     d18:	83 c0       	rjmp	.+262    	; 0xe20 <DIO_voidSetPinDirection+0x1b6>
			}
			break;

		case PORTB:
			if(Copy_u8PinMode == DIO_INPUT)
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	88 23       	and	r24, r24
     d1e:	a9 f4       	brne	.+42     	; 0xd4a <DIO_voidSetPinDirection+0xe0>
			{
				CLR_BIT(DIO_DDRB, Copy_u8PinNumber);
     d20:	a7 e3       	ldi	r26, 0x37	; 55
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e7 e3       	ldi	r30, 0x37	; 55
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	48 2f       	mov	r20, r24
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 2e       	mov	r0, r18
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <DIO_voidSetPinDirection+0xd4>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <DIO_voidSetPinDirection+0xd0>
     d42:	80 95       	com	r24
     d44:	84 23       	and	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	6b c0       	rjmp	.+214    	; 0xe20 <DIO_voidSetPinDirection+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRB, Copy_u8PinNumber);
     d4a:	a7 e3       	ldi	r26, 0x37	; 55
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e7 e3       	ldi	r30, 0x37	; 55
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	48 2f       	mov	r20, r24
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 2e       	mov	r0, r18
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <DIO_voidSetPinDirection+0xfe>
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <DIO_voidSetPinDirection+0xfa>
     d6c:	84 2b       	or	r24, r20
     d6e:	8c 93       	st	X, r24
     d70:	57 c0       	rjmp	.+174    	; 0xe20 <DIO_voidSetPinDirection+0x1b6>
			}
			break;

		case PORTC:
			if(Copy_u8PinMode == DIO_INPUT)
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	88 23       	and	r24, r24
     d76:	a9 f4       	brne	.+42     	; 0xda2 <DIO_voidSetPinDirection+0x138>
			{
				CLR_BIT(DIO_DDRC, Copy_u8PinNumber);
     d78:	a4 e3       	ldi	r26, 0x34	; 52
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e4 e3       	ldi	r30, 0x34	; 52
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 2e       	mov	r0, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_voidSetPinDirection+0x12c>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_voidSetPinDirection+0x128>
     d9a:	80 95       	com	r24
     d9c:	84 23       	and	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	3f c0       	rjmp	.+126    	; 0xe20 <DIO_voidSetPinDirection+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRC, Copy_u8PinNumber);
     da2:	a4 e3       	ldi	r26, 0x34	; 52
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e4 e3       	ldi	r30, 0x34	; 52
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_voidSetPinDirection+0x156>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_voidSetPinDirection+0x152>
     dc4:	84 2b       	or	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	2b c0       	rjmp	.+86     	; 0xe20 <DIO_voidSetPinDirection+0x1b6>
			}
			break;

		case PORTD:
			if(Copy_u8PinMode == DIO_INPUT)
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	88 23       	and	r24, r24
     dce:	a9 f4       	brne	.+42     	; 0xdfa <DIO_voidSetPinDirection+0x190>
			{
				CLR_BIT(DIO_DDRD, Copy_u8PinNumber);
     dd0:	a1 e3       	ldi	r26, 0x31	; 49
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e1 e3       	ldi	r30, 0x31	; 49
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	48 2f       	mov	r20, r24
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 2e       	mov	r0, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_voidSetPinDirection+0x184>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	0a 94       	dec	r0
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_voidSetPinDirection+0x180>
     df2:	80 95       	com	r24
     df4:	84 23       	and	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	13 c0       	rjmp	.+38     	; 0xe20 <DIO_voidSetPinDirection+0x1b6>
			}
			else
			{
				SET_BIT(DIO_DDRD, Copy_u8PinNumber);
     dfa:	a1 e3       	ldi	r26, 0x31	; 49
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e1 e3       	ldi	r30, 0x31	; 49
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <DIO_voidSetPinDirection+0x1ae>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <DIO_voidSetPinDirection+0x1aa>
     e1c:	84 2b       	or	r24, r20
     e1e:	8c 93       	st	X, r24
			
			
		default:
			break;
	}
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinState)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <DIO_voidSetPinValue+0x6>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <DIO_voidSetPinValue+0x8>
     e38:	0f 92       	push	r0
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	6a 83       	std	Y+2, r22	; 0x02
     e42:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortName)
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	3d 83       	std	Y+5, r19	; 0x05
     e4c:	2c 83       	std	Y+4, r18	; 0x04
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	9d 81       	ldd	r25, Y+5	; 0x05
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	91 05       	cpc	r25, r1
     e56:	09 f4       	brne	.+2      	; 0xe5a <DIO_voidSetPinValue+0x2a>
     e58:	43 c0       	rjmp	.+134    	; 0xee0 <DIO_voidSetPinValue+0xb0>
     e5a:	2c 81       	ldd	r18, Y+4	; 0x04
     e5c:	3d 81       	ldd	r19, Y+5	; 0x05
     e5e:	22 30       	cpi	r18, 0x02	; 2
     e60:	31 05       	cpc	r19, r1
     e62:	2c f4       	brge	.+10     	; 0xe6e <DIO_voidSetPinValue+0x3e>
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	9d 81       	ldd	r25, Y+5	; 0x05
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	71 f0       	breq	.+28     	; 0xe88 <DIO_voidSetPinValue+0x58>
     e6c:	bc c0       	rjmp	.+376    	; 0xfe6 <DIO_voidSetPinValue+0x1b6>
     e6e:	2c 81       	ldd	r18, Y+4	; 0x04
     e70:	3d 81       	ldd	r19, Y+5	; 0x05
     e72:	22 30       	cpi	r18, 0x02	; 2
     e74:	31 05       	cpc	r19, r1
     e76:	09 f4       	brne	.+2      	; 0xe7a <DIO_voidSetPinValue+0x4a>
     e78:	5f c0       	rjmp	.+190    	; 0xf38 <DIO_voidSetPinValue+0x108>
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	9d 81       	ldd	r25, Y+5	; 0x05
     e7e:	83 30       	cpi	r24, 0x03	; 3
     e80:	91 05       	cpc	r25, r1
     e82:	09 f4       	brne	.+2      	; 0xe86 <DIO_voidSetPinValue+0x56>
     e84:	85 c0       	rjmp	.+266    	; 0xf90 <DIO_voidSetPinValue+0x160>
     e86:	af c0       	rjmp	.+350    	; 0xfe6 <DIO_voidSetPinValue+0x1b6>
	{
		case PORTA:
			if (Copy_u8PinState == DIO_HIGH) // INPUT_PULLUP
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	a1 f4       	brne	.+40     	; 0xeb6 <DIO_voidSetPinValue+0x86>
			{
				SET_BIT(DIO_PORTA, Copy_u8PinNumber);
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_voidSetPinValue+0x7c>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_voidSetPinValue+0x78>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	98 c0       	rjmp	.+304    	; 0xfe6 <DIO_voidSetPinValue+0x1b6>
			}
			else		// DIO_LOW		INPUT_NOPULLUP
			{
				CLR_BIT(DIO_PORTA, Copy_u8PinNumber);
     eb6:	ab e3       	ldi	r26, 0x3B	; 59
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	eb e3       	ldi	r30, 0x3B	; 59
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_voidSetPinValue+0xa4>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_voidSetPinValue+0xa0>
     ed8:	80 95       	com	r24
     eda:	84 23       	and	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	83 c0       	rjmp	.+262    	; 0xfe6 <DIO_voidSetPinValue+0x1b6>
			}
		break;
		
		case PORTB:
			if (Copy_u8PinState == DIO_HIGH) // INPUT_PULLUP
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	a1 f4       	brne	.+40     	; 0xf0e <DIO_voidSetPinValue+0xde>
			{
				SET_BIT(DIO_PORTB, Copy_u8PinNumber);
     ee6:	a8 e3       	ldi	r26, 0x38	; 56
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e8 e3       	ldi	r30, 0x38	; 56
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_voidSetPinValue+0xd4>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_voidSetPinValue+0xd0>
     f08:	84 2b       	or	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	6c c0       	rjmp	.+216    	; 0xfe6 <DIO_voidSetPinValue+0x1b6>
			}
			else		// DIO_LOW		INPUT_NOPULLUP
			{
				CLR_BIT(DIO_PORTB, Copy_u8PinNumber);
     f0e:	a8 e3       	ldi	r26, 0x38	; 56
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e8 e3       	ldi	r30, 0x38	; 56
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_voidSetPinValue+0xfc>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_voidSetPinValue+0xf8>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	57 c0       	rjmp	.+174    	; 0xfe6 <DIO_voidSetPinValue+0x1b6>
			}
		break;

		case PORTC:
			if (Copy_u8PinState == DIO_HIGH) // INPUT_PULLUP
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	a1 f4       	brne	.+40     	; 0xf66 <DIO_voidSetPinValue+0x136>
			{
				SET_BIT(DIO_PORTC, Copy_u8PinNumber);
     f3e:	a5 e3       	ldi	r26, 0x35	; 53
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e5 e3       	ldi	r30, 0x35	; 53
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_voidSetPinValue+0x12c>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_voidSetPinValue+0x128>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	40 c0       	rjmp	.+128    	; 0xfe6 <DIO_voidSetPinValue+0x1b6>
			}
			else		// DIO_LOW		INPUT_NOPULLUP
			{
				CLR_BIT(DIO_PORTC, Copy_u8PinNumber);
     f66:	a5 e3       	ldi	r26, 0x35	; 53
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e5 e3       	ldi	r30, 0x35	; 53
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_voidSetPinValue+0x154>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_voidSetPinValue+0x150>
     f88:	80 95       	com	r24
     f8a:	84 23       	and	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	2b c0       	rjmp	.+86     	; 0xfe6 <DIO_voidSetPinValue+0x1b6>
			}
			break;

		case PORTD:
			if (Copy_u8PinState == DIO_HIGH) // INPUT_PULLUP
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	a1 f4       	brne	.+40     	; 0xfbe <DIO_voidSetPinValue+0x18e>
			{
				SET_BIT(DIO_PORTD, Copy_u8PinNumber);
     f96:	a2 e3       	ldi	r26, 0x32	; 50
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e2 e3       	ldi	r30, 0x32	; 50
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_voidSetPinValue+0x184>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_voidSetPinValue+0x180>
     fb8:	84 2b       	or	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	14 c0       	rjmp	.+40     	; 0xfe6 <DIO_voidSetPinValue+0x1b6>
			}
			else		// DIO_LOW		INPUT_NOPULLUP
			{
				CLR_BIT(DIO_PORTD, Copy_u8PinNumber);
     fbe:	a2 e3       	ldi	r26, 0x32	; 50
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e2 e3       	ldi	r30, 0x32	; 50
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_voidSetPinValue+0x1ac>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_voidSetPinValue+0x1a8>
     fe0:	80 95       	com	r24
     fe2:	84 23       	and	r24, r20
     fe4:	8c 93       	st	X, r24
			}
			break;

	}
}
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <DIO_voidSetPortDirection>:
//PORTA = 0b00000001;			// Bit (Pin) 0 in port A has pull up resistor turned on  



void DIO_voidSetPortDirection(u8 Copy_u8PortName, u8 Copy_u8PortMode)
{
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	00 d0       	rcall	.+0      	; 0xffc <DIO_voidSetPortDirection+0x6>
     ffc:	00 d0       	rcall	.+0      	; 0xffe <DIO_voidSetPortDirection+0x8>
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	3c 83       	std	Y+4, r19	; 0x04
    100e:	2b 83       	std	Y+3, r18	; 0x03
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	91 05       	cpc	r25, r1
    1018:	21 f1       	breq	.+72     	; 0x1062 <DIO_voidSetPortDirection+0x6c>
    101a:	2b 81       	ldd	r18, Y+3	; 0x03
    101c:	3c 81       	ldd	r19, Y+4	; 0x04
    101e:	22 30       	cpi	r18, 0x02	; 2
    1020:	31 05       	cpc	r19, r1
    1022:	2c f4       	brge	.+10     	; 0x102e <DIO_voidSetPortDirection+0x38>
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	9c 81       	ldd	r25, Y+4	; 0x04
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	61 f0       	breq	.+24     	; 0x1044 <DIO_voidSetPortDirection+0x4e>
    102c:	46 c0       	rjmp	.+140    	; 0x10ba <DIO_voidSetPortDirection+0xc4>
    102e:	2b 81       	ldd	r18, Y+3	; 0x03
    1030:	3c 81       	ldd	r19, Y+4	; 0x04
    1032:	22 30       	cpi	r18, 0x02	; 2
    1034:	31 05       	cpc	r19, r1
    1036:	21 f1       	breq	.+72     	; 0x1080 <DIO_voidSetPortDirection+0x8a>
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	83 30       	cpi	r24, 0x03	; 3
    103e:	91 05       	cpc	r25, r1
    1040:	71 f1       	breq	.+92     	; 0x109e <DIO_voidSetPortDirection+0xa8>
    1042:	3b c0       	rjmp	.+118    	; 0x10ba <DIO_voidSetPortDirection+0xc4>
	{
		case PORTA:
			if(Copy_u8PortMode == DIO_OUTPUT)
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	29 f4       	brne	.+10     	; 0x1054 <DIO_voidSetPortDirection+0x5e>
			{
				DIO_DDRA = OUTPUT_PORT_VALUE;
    104a:	ea e3       	ldi	r30, 0x3A	; 58
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	80 83       	st	Z, r24
    1052:	33 c0       	rjmp	.+102    	; 0x10ba <DIO_voidSetPortDirection+0xc4>
			}
			else if(Copy_u8PortMode == DIO_INPUT)
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	88 23       	and	r24, r24
    1058:	81 f5       	brne	.+96     	; 0x10ba <DIO_voidSetPortDirection+0xc4>
			{
				DIO_DDRA = INPUT_PORT_VALUE;
    105a:	ea e3       	ldi	r30, 0x3A	; 58
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	10 82       	st	Z, r1
    1060:	2c c0       	rjmp	.+88     	; 0x10ba <DIO_voidSetPortDirection+0xc4>
			}
		break;
		
		case PORTB:
			if(Copy_u8PortMode == DIO_OUTPUT)
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	29 f4       	brne	.+10     	; 0x1072 <DIO_voidSetPortDirection+0x7c>
			{
				DIO_DDRB = OUTPUT_PORT_VALUE;
    1068:	e7 e3       	ldi	r30, 0x37	; 55
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	8f ef       	ldi	r24, 0xFF	; 255
    106e:	80 83       	st	Z, r24
    1070:	24 c0       	rjmp	.+72     	; 0x10ba <DIO_voidSetPortDirection+0xc4>
			}
			else if(Copy_u8PortMode == DIO_INPUT)
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	88 23       	and	r24, r24
    1076:	09 f5       	brne	.+66     	; 0x10ba <DIO_voidSetPortDirection+0xc4>
			{
				DIO_DDRB = INPUT_PORT_VALUE;
    1078:	e7 e3       	ldi	r30, 0x37	; 55
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	10 82       	st	Z, r1
    107e:	1d c0       	rjmp	.+58     	; 0x10ba <DIO_voidSetPortDirection+0xc4>
			}
		break;

		case PORTC:
			if(Copy_u8PortMode == DIO_OUTPUT)
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	29 f4       	brne	.+10     	; 0x1090 <DIO_voidSetPortDirection+0x9a>
			{
				DIO_DDRC = OUTPUT_PORT_VALUE;
    1086:	e4 e3       	ldi	r30, 0x34	; 52
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8f ef       	ldi	r24, 0xFF	; 255
    108c:	80 83       	st	Z, r24
    108e:	15 c0       	rjmp	.+42     	; 0x10ba <DIO_voidSetPortDirection+0xc4>
			}
			else if(Copy_u8PortMode == DIO_INPUT)
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	88 23       	and	r24, r24
    1094:	91 f4       	brne	.+36     	; 0x10ba <DIO_voidSetPortDirection+0xc4>
			{
				DIO_DDRC = INPUT_PORT_VALUE;
    1096:	e4 e3       	ldi	r30, 0x34	; 52
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	10 82       	st	Z, r1
    109c:	0e c0       	rjmp	.+28     	; 0x10ba <DIO_voidSetPortDirection+0xc4>
			}
		break;

		case PORTD:
			if(Copy_u8PortMode == DIO_OUTPUT)
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	29 f4       	brne	.+10     	; 0x10ae <DIO_voidSetPortDirection+0xb8>
			{
				DIO_DDRD = OUTPUT_PORT_VALUE;
    10a4:	e1 e3       	ldi	r30, 0x31	; 49
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	80 83       	st	Z, r24
    10ac:	06 c0       	rjmp	.+12     	; 0x10ba <DIO_voidSetPortDirection+0xc4>
			}
			else if(Copy_u8PortMode == DIO_INPUT)
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	88 23       	and	r24, r24
    10b2:	19 f4       	brne	.+6      	; 0x10ba <DIO_voidSetPortDirection+0xc4>
			{
				DIO_DDRD = INPUT_PORT_VALUE;
    10b4:	e1 e3       	ldi	r30, 0x31	; 49
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	10 82       	st	Z, r1
			}
		break;

	}
}
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <DIO_voidSetPortSpecificValue>:


void DIO_voidSetPortSpecificValue(u8 Copy_u8PortName, u8 Copy_u8Value)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <DIO_voidSetPortSpecificValue+0x6>
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <DIO_voidSetPortSpecificValue+0x8>
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	3c 83       	std	Y+4, r19	; 0x04
    10e0:	2b 83       	std	Y+3, r18	; 0x03
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	9c 81       	ldd	r25, Y+4	; 0x04
    10e6:	81 30       	cpi	r24, 0x01	; 1
    10e8:	91 05       	cpc	r25, r1
    10ea:	d1 f0       	breq	.+52     	; 0x1120 <DIO_voidSetPortSpecificValue+0x58>
    10ec:	2b 81       	ldd	r18, Y+3	; 0x03
    10ee:	3c 81       	ldd	r19, Y+4	; 0x04
    10f0:	22 30       	cpi	r18, 0x02	; 2
    10f2:	31 05       	cpc	r19, r1
    10f4:	2c f4       	brge	.+10     	; 0x1100 <DIO_voidSetPortSpecificValue+0x38>
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	61 f0       	breq	.+24     	; 0x1116 <DIO_voidSetPortSpecificValue+0x4e>
    10fe:	1e c0       	rjmp	.+60     	; 0x113c <DIO_voidSetPortSpecificValue+0x74>
    1100:	2b 81       	ldd	r18, Y+3	; 0x03
    1102:	3c 81       	ldd	r19, Y+4	; 0x04
    1104:	22 30       	cpi	r18, 0x02	; 2
    1106:	31 05       	cpc	r19, r1
    1108:	81 f0       	breq	.+32     	; 0x112a <DIO_voidSetPortSpecificValue+0x62>
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	9c 81       	ldd	r25, Y+4	; 0x04
    110e:	83 30       	cpi	r24, 0x03	; 3
    1110:	91 05       	cpc	r25, r1
    1112:	81 f0       	breq	.+32     	; 0x1134 <DIO_voidSetPortSpecificValue+0x6c>
    1114:	13 c0       	rjmp	.+38     	; 0x113c <DIO_voidSetPortSpecificValue+0x74>
	{
		case PORTA: 
			DIO_PORTA = Copy_u8Value;
    1116:	eb e3       	ldi	r30, 0x3B	; 59
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	80 83       	st	Z, r24
    111e:	0e c0       	rjmp	.+28     	; 0x113c <DIO_voidSetPortSpecificValue+0x74>
		break;
		
		case PORTB:
			DIO_PORTB = Copy_u8Value;
    1120:	e8 e3       	ldi	r30, 0x38	; 56
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	80 83       	st	Z, r24
    1128:	09 c0       	rjmp	.+18     	; 0x113c <DIO_voidSetPortSpecificValue+0x74>
		break;

		case PORTC:
			DIO_PORTC = Copy_u8Value;
    112a:	e5 e3       	ldi	r30, 0x35	; 53
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	80 83       	st	Z, r24
    1132:	04 c0       	rjmp	.+8      	; 0x113c <DIO_voidSetPortSpecificValue+0x74>
		break;

		case PORTD:
			DIO_PORTD = Copy_u8Value;
    1134:	e2 e3       	ldi	r30, 0x32	; 50
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	80 83       	st	Z, r24
		break;

	}
}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber)
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	00 d0       	rcall	.+0      	; 0x1150 <DIO_u8GetPinValue+0x6>
    1150:	00 d0       	rcall	.+0      	; 0x1152 <DIO_u8GetPinValue+0x8>
    1152:	0f 92       	push	r0
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	8a 83       	std	Y+2, r24	; 0x02
    115a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue;
	switch(Copy_u8PortName)
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3d 83       	std	Y+5, r19	; 0x05
    1164:	2c 83       	std	Y+4, r18	; 0x04
    1166:	4c 81       	ldd	r20, Y+4	; 0x04
    1168:	5d 81       	ldd	r21, Y+5	; 0x05
    116a:	41 30       	cpi	r20, 0x01	; 1
    116c:	51 05       	cpc	r21, r1
    116e:	41 f1       	breq	.+80     	; 0x11c0 <DIO_u8GetPinValue+0x76>
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	82 30       	cpi	r24, 0x02	; 2
    1176:	91 05       	cpc	r25, r1
    1178:	34 f4       	brge	.+12     	; 0x1186 <DIO_u8GetPinValue+0x3c>
    117a:	2c 81       	ldd	r18, Y+4	; 0x04
    117c:	3d 81       	ldd	r19, Y+5	; 0x05
    117e:	21 15       	cp	r18, r1
    1180:	31 05       	cpc	r19, r1
    1182:	61 f0       	breq	.+24     	; 0x119c <DIO_u8GetPinValue+0x52>
    1184:	52 c0       	rjmp	.+164    	; 0x122a <DIO_u8GetPinValue+0xe0>
    1186:	4c 81       	ldd	r20, Y+4	; 0x04
    1188:	5d 81       	ldd	r21, Y+5	; 0x05
    118a:	42 30       	cpi	r20, 0x02	; 2
    118c:	51 05       	cpc	r21, r1
    118e:	51 f1       	breq	.+84     	; 0x11e4 <DIO_u8GetPinValue+0x9a>
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	9d 81       	ldd	r25, Y+5	; 0x05
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	91 05       	cpc	r25, r1
    1198:	b9 f1       	breq	.+110    	; 0x1208 <DIO_u8GetPinValue+0xbe>
    119a:	47 c0       	rjmp	.+142    	; 0x122a <DIO_u8GetPinValue+0xe0>
	{
		case PORTA:
			Local_u8PinValue = GET_BIT(DIO_PINA, Copy_u8PinNumber);
    119c:	e9 e3       	ldi	r30, 0x39	; 57
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a9 01       	movw	r20, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <DIO_u8GetPinValue+0x6a>
    11b0:	55 95       	asr	r21
    11b2:	47 95       	ror	r20
    11b4:	8a 95       	dec	r24
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <DIO_u8GetPinValue+0x66>
    11b8:	ca 01       	movw	r24, r20
    11ba:	81 70       	andi	r24, 0x01	; 1
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	35 c0       	rjmp	.+106    	; 0x122a <DIO_u8GetPinValue+0xe0>
		break;
		
		case PORTB:
			Local_u8PinValue = GET_BIT(DIO_PINB, Copy_u8PinNumber);
    11c0:	e6 e3       	ldi	r30, 0x36	; 54
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	a9 01       	movw	r20, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_u8GetPinValue+0x8e>
    11d4:	55 95       	asr	r21
    11d6:	47 95       	ror	r20
    11d8:	8a 95       	dec	r24
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_u8GetPinValue+0x8a>
    11dc:	ca 01       	movw	r24, r20
    11de:	81 70       	andi	r24, 0x01	; 1
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	23 c0       	rjmp	.+70     	; 0x122a <DIO_u8GetPinValue+0xe0>
		break;
		
		case PORTC:
			Local_u8PinValue = GET_BIT(DIO_PINC, Copy_u8PinNumber);
    11e4:	e3 e3       	ldi	r30, 0x33	; 51
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	a9 01       	movw	r20, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_u8GetPinValue+0xb2>
    11f8:	55 95       	asr	r21
    11fa:	47 95       	ror	r20
    11fc:	8a 95       	dec	r24
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <DIO_u8GetPinValue+0xae>
    1200:	ca 01       	movw	r24, r20
    1202:	81 70       	andi	r24, 0x01	; 1
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	11 c0       	rjmp	.+34     	; 0x122a <DIO_u8GetPinValue+0xe0>
		break;
		
		case PORTD:
			Local_u8PinValue = GET_BIT(DIO_PIND, Copy_u8PinNumber);
    1208:	e0 e3       	ldi	r30, 0x30	; 48
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	a9 01       	movw	r20, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_u8GetPinValue+0xd6>
    121c:	55 95       	asr	r21
    121e:	47 95       	ror	r20
    1220:	8a 95       	dec	r24
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_u8GetPinValue+0xd2>
    1224:	ca 01       	movw	r24, r20
    1226:	81 70       	andi	r24, 0x01	; 1
    1228:	89 83       	std	Y+1, r24	; 0x01
		default:
			/* Error To Be Displayed */
		break;
	}
	
	return Local_u8PinValue;
    122a:	89 81       	ldd	r24, Y+1	; 0x01
}
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <LCD_voidSendCommand>:

#include <util/delay.h>


void LCD_voidSendCommand(u8 Copy_u8Command)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	2f 97       	sbiw	r28, 0x0f	; 15
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	8f 87       	std	Y+15, r24	; 0x0f
	/* Set The RS Pin To Be Low: 0v for Command */
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_LOW);
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	
	/* Set The RW Pin To Be Low: 0v for Write */
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_LOW);
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	
	/* Set The Port Value To Be The Command */
	DIO_voidSetPortSpecificValue(LCD_DATA_PORT, Copy_u8Command);
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	6f 85       	ldd	r22, Y+15	; 0x0f
    126a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_voidSetPortSpecificValue>
	
	/* Set The Enable Pin To High*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, DIO_HIGH);
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	62 e0       	ldi	r22, 0x02	; 2
    1272:	41 e0       	ldi	r20, 0x01	; 1
    1274:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a0 e0       	ldi	r26, 0x00	; 0
    127e:	b0 e4       	ldi	r27, 0x40	; 64
    1280:	8b 87       	std	Y+11, r24	; 0x0b
    1282:	9c 87       	std	Y+12, r25	; 0x0c
    1284:	ad 87       	std	Y+13, r26	; 0x0d
    1286:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1288:	6b 85       	ldd	r22, Y+11	; 0x0b
    128a:	7c 85       	ldd	r23, Y+12	; 0x0c
    128c:	8d 85       	ldd	r24, Y+13	; 0x0d
    128e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	4a ef       	ldi	r20, 0xFA	; 250
    1296:	54 e4       	ldi	r21, 0x44	; 68
    1298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	8f 83       	std	Y+7, r24	; 0x07
    12a2:	98 87       	std	Y+8, r25	; 0x08
    12a4:	a9 87       	std	Y+9, r26	; 0x09
    12a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12a8:	6f 81       	ldd	r22, Y+7	; 0x07
    12aa:	78 85       	ldd	r23, Y+8	; 0x08
    12ac:	89 85       	ldd	r24, Y+9	; 0x09
    12ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e8       	ldi	r20, 0x80	; 128
    12b6:	5f e3       	ldi	r21, 0x3F	; 63
    12b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12bc:	88 23       	and	r24, r24
    12be:	2c f4       	brge	.+10     	; 0x12ca <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	8d 83       	std	Y+5, r24	; 0x05
    12c8:	3f c0       	rjmp	.+126    	; 0x1348 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    12ca:	6f 81       	ldd	r22, Y+7	; 0x07
    12cc:	78 85       	ldd	r23, Y+8	; 0x08
    12ce:	89 85       	ldd	r24, Y+9	; 0x09
    12d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	3f ef       	ldi	r19, 0xFF	; 255
    12d6:	4f e7       	ldi	r20, 0x7F	; 127
    12d8:	57 e4       	ldi	r21, 0x47	; 71
    12da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12de:	18 16       	cp	r1, r24
    12e0:	4c f5       	brge	.+82     	; 0x1334 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e2       	ldi	r20, 0x20	; 32
    12f0:	51 e4       	ldi	r21, 0x41	; 65
    12f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	9e 83       	std	Y+6, r25	; 0x06
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	0f c0       	rjmp	.+30     	; 0x132a <LCD_voidSendCommand+0xee>
    130c:	88 ec       	ldi	r24, 0xC8	; 200
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <LCD_voidSendCommand+0xdc>
    131c:	9c 83       	std	Y+4, r25	; 0x04
    131e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	9e 83       	std	Y+6, r25	; 0x06
    1328:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	69 f7       	brne	.-38     	; 0x130c <LCD_voidSendCommand+0xd0>
    1332:	14 c0       	rjmp	.+40     	; 0x135c <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1334:	6f 81       	ldd	r22, Y+7	; 0x07
    1336:	78 85       	ldd	r23, Y+8	; 0x08
    1338:	89 85       	ldd	r24, Y+9	; 0x09
    133a:	9a 85       	ldd	r25, Y+10	; 0x0a
    133c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	9a 81       	ldd	r25, Y+2	; 0x02
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <LCD_voidSendCommand+0x118>
    1358:	9a 83       	std	Y+2, r25	; 0x02
    135a:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait For 2msec */
	_delay_ms(2);
	
	/* Set The Enable Pin To Low*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, DIO_LOW);
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	62 e0       	ldi	r22, 0x02	; 2
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	
}
    1366:	2f 96       	adiw	r28, 0x0f	; 15
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <LCD_voidClearDisplay>:
void LCD_voidClearDisplay(void)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(CLEAR_COMMAND);
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_voidSendCommand>
}
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <LCD_voidSendData>:


void LCD_voidSendData(u8 Copy_u8Data)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	2f 97       	sbiw	r28, 0x0f	; 15
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	8f 87       	std	Y+15, r24	; 0x0f
	/* Set The RS Pin To Be High: 5v for Data */
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RS_PIN, DIO_HIGH);
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	
	/* Set The RW Pin To Be Low: 0v for Write */
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_RW_PIN, DIO_LOW);
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	
	/* Set The Port Value To Be The Data */
	DIO_voidSetPortSpecificValue(LCD_DATA_PORT, Copy_u8Data);
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	6f 85       	ldd	r22, Y+15	; 0x0f
    13ba:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_voidSetPortSpecificValue>
	
	/* Set The Enable Pin To High*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, DIO_HIGH);
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	62 e0       	ldi	r22, 0x02	; 2
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a0 e0       	ldi	r26, 0x00	; 0
    13ce:	b0 e4       	ldi	r27, 0x40	; 64
    13d0:	8b 87       	std	Y+11, r24	; 0x0b
    13d2:	9c 87       	std	Y+12, r25	; 0x0c
    13d4:	ad 87       	std	Y+13, r26	; 0x0d
    13d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13da:	7c 85       	ldd	r23, Y+12	; 0x0c
    13dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13de:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	4a ef       	ldi	r20, 0xFA	; 250
    13e6:	54 e4       	ldi	r21, 0x44	; 68
    13e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	8f 83       	std	Y+7, r24	; 0x07
    13f2:	98 87       	std	Y+8, r25	; 0x08
    13f4:	a9 87       	std	Y+9, r26	; 0x09
    13f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f8:	6f 81       	ldd	r22, Y+7	; 0x07
    13fa:	78 85       	ldd	r23, Y+8	; 0x08
    13fc:	89 85       	ldd	r24, Y+9	; 0x09
    13fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e8       	ldi	r20, 0x80	; 128
    1406:	5f e3       	ldi	r21, 0x3F	; 63
    1408:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    140c:	88 23       	and	r24, r24
    140e:	2c f4       	brge	.+10     	; 0x141a <LCD_voidSendData+0x8e>
		__ticks = 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9e 83       	std	Y+6, r25	; 0x06
    1416:	8d 83       	std	Y+5, r24	; 0x05
    1418:	3f c0       	rjmp	.+126    	; 0x1498 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    141a:	6f 81       	ldd	r22, Y+7	; 0x07
    141c:	78 85       	ldd	r23, Y+8	; 0x08
    141e:	89 85       	ldd	r24, Y+9	; 0x09
    1420:	9a 85       	ldd	r25, Y+10	; 0x0a
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	3f ef       	ldi	r19, 0xFF	; 255
    1426:	4f e7       	ldi	r20, 0x7F	; 127
    1428:	57 e4       	ldi	r21, 0x47	; 71
    142a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    142e:	18 16       	cp	r1, r24
    1430:	4c f5       	brge	.+82     	; 0x1484 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1432:	6b 85       	ldd	r22, Y+11	; 0x0b
    1434:	7c 85       	ldd	r23, Y+12	; 0x0c
    1436:	8d 85       	ldd	r24, Y+13	; 0x0d
    1438:	9e 85       	ldd	r25, Y+14	; 0x0e
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e2       	ldi	r20, 0x20	; 32
    1440:	51 e4       	ldi	r21, 0x41	; 65
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	bc 01       	movw	r22, r24
    144c:	cd 01       	movw	r24, r26
    144e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9e 83       	std	Y+6, r25	; 0x06
    1458:	8d 83       	std	Y+5, r24	; 0x05
    145a:	0f c0       	rjmp	.+30     	; 0x147a <LCD_voidSendData+0xee>
    145c:	88 ec       	ldi	r24, 0xC8	; 200
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9c 83       	std	Y+4, r25	; 0x04
    1462:	8b 83       	std	Y+3, r24	; 0x03
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <LCD_voidSendData+0xdc>
    146c:	9c 83       	std	Y+4, r25	; 0x04
    146e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	69 f7       	brne	.-38     	; 0x145c <LCD_voidSendData+0xd0>
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1484:	6f 81       	ldd	r22, Y+7	; 0x07
    1486:	78 85       	ldd	r23, Y+8	; 0x08
    1488:	89 85       	ldd	r24, Y+9	; 0x09
    148a:	9a 85       	ldd	r25, Y+10	; 0x0a
    148c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 83       	std	Y+5, r24	; 0x05
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <LCD_voidSendData+0x118>
    14a8:	9a 83       	std	Y+2, r25	; 0x02
    14aa:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait For 2msec */
	_delay_ms(2);
	
	/* Set The Enable Pin To Low*/
	DIO_voidSetPinValue(LCD_CTRL_PORT, LCD_EN_PIN, DIO_LOW);
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	62 e0       	ldi	r22, 0x02	; 2
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	
}
    14b6:	2f 96       	adiw	r28, 0x0f	; 15
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <LCD_voidInit>:

void LCD_voidInit(void)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	2e 97       	sbiw	r28, 0x0e	; 14
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
	/* Set The Data Port To Be Output */
	DIO_voidSetPortDirection(LCD_DATA_PORT, DIO_OUTPUT);
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	0e 94 fb 07 	call	0xff6	; 0xff6 <DIO_voidSetPortDirection>
	
	/* Set The Control Pins To Be Output */
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RS_PIN, DIO_OUTPUT);
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	41 e0       	ldi	r20, 0x01	; 1
    14ea:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_RW_PIN, DIO_OUTPUT);
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	61 e0       	ldi	r22, 0x01	; 1
    14f2:	41 e0       	ldi	r20, 0x01	; 1
    14f4:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CTRL_PORT, LCD_EN_PIN, DIO_OUTPUT);
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	62 e0       	ldi	r22, 0x02	; 2
    14fc:	41 e0       	ldi	r20, 0x01	; 1
    14fe:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a0 e2       	ldi	r26, 0x20	; 32
    1508:	b2 e4       	ldi	r27, 0x42	; 66
    150a:	8b 87       	std	Y+11, r24	; 0x0b
    150c:	9c 87       	std	Y+12, r25	; 0x0c
    150e:	ad 87       	std	Y+13, r26	; 0x0d
    1510:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1512:	6b 85       	ldd	r22, Y+11	; 0x0b
    1514:	7c 85       	ldd	r23, Y+12	; 0x0c
    1516:	8d 85       	ldd	r24, Y+13	; 0x0d
    1518:	9e 85       	ldd	r25, Y+14	; 0x0e
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	4a ef       	ldi	r20, 0xFA	; 250
    1520:	54 e4       	ldi	r21, 0x44	; 68
    1522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	8f 83       	std	Y+7, r24	; 0x07
    152c:	98 87       	std	Y+8, r25	; 0x08
    152e:	a9 87       	std	Y+9, r26	; 0x09
    1530:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1532:	6f 81       	ldd	r22, Y+7	; 0x07
    1534:	78 85       	ldd	r23, Y+8	; 0x08
    1536:	89 85       	ldd	r24, Y+9	; 0x09
    1538:	9a 85       	ldd	r25, Y+10	; 0x0a
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e8       	ldi	r20, 0x80	; 128
    1540:	5f e3       	ldi	r21, 0x3F	; 63
    1542:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1546:	88 23       	and	r24, r24
    1548:	2c f4       	brge	.+10     	; 0x1554 <LCD_voidInit+0x8c>
		__ticks = 1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	9e 83       	std	Y+6, r25	; 0x06
    1550:	8d 83       	std	Y+5, r24	; 0x05
    1552:	3f c0       	rjmp	.+126    	; 0x15d2 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1554:	6f 81       	ldd	r22, Y+7	; 0x07
    1556:	78 85       	ldd	r23, Y+8	; 0x08
    1558:	89 85       	ldd	r24, Y+9	; 0x09
    155a:	9a 85       	ldd	r25, Y+10	; 0x0a
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	3f ef       	ldi	r19, 0xFF	; 255
    1560:	4f e7       	ldi	r20, 0x7F	; 127
    1562:	57 e4       	ldi	r21, 0x47	; 71
    1564:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1568:	18 16       	cp	r1, r24
    156a:	4c f5       	brge	.+82     	; 0x15be <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156c:	6b 85       	ldd	r22, Y+11	; 0x0b
    156e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1570:	8d 85       	ldd	r24, Y+13	; 0x0d
    1572:	9e 85       	ldd	r25, Y+14	; 0x0e
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e2       	ldi	r20, 0x20	; 32
    157a:	51 e4       	ldi	r21, 0x41	; 65
    157c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 83       	std	Y+5, r24	; 0x05
    1594:	0f c0       	rjmp	.+30     	; 0x15b4 <LCD_voidInit+0xec>
    1596:	88 ec       	ldi	r24, 0xC8	; 200
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	9c 83       	std	Y+4, r25	; 0x04
    159c:	8b 83       	std	Y+3, r24	; 0x03
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <LCD_voidInit+0xda>
    15a6:	9c 83       	std	Y+4, r25	; 0x04
    15a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15aa:	8d 81       	ldd	r24, Y+5	; 0x05
    15ac:	9e 81       	ldd	r25, Y+6	; 0x06
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	9e 83       	std	Y+6, r25	; 0x06
    15b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	9e 81       	ldd	r25, Y+6	; 0x06
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	69 f7       	brne	.-38     	; 0x1596 <LCD_voidInit+0xce>
    15bc:	14 c0       	rjmp	.+40     	; 0x15e6 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15be:	6f 81       	ldd	r22, Y+7	; 0x07
    15c0:	78 85       	ldd	r23, Y+8	; 0x08
    15c2:	89 85       	ldd	r24, Y+9	; 0x09
    15c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	9e 83       	std	Y+6, r25	; 0x06
    15d0:	8d 83       	std	Y+5, r24	; 0x05
    15d2:	8d 81       	ldd	r24, Y+5	; 0x05
    15d4:	9e 81       	ldd	r25, Y+6	; 0x06
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <LCD_voidInit+0x116>
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01
	/* Wait For 40msec*/
	_delay_ms(40);
	/* Send The Function set, N: 1 => 2-Lines, F: 0 => 5*8 dots*/
	LCD_voidSendCommand(0x38);
    15e6:	88 e3       	ldi	r24, 0x38	; 56
    15e8:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_voidSendCommand>
	LCD_voidSendCommand(0x0F);
    15ec:	8f e0       	ldi	r24, 0x0F	; 15
    15ee:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_voidSendCommand>
	LCD_voidSendCommand(0x01);
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_voidSendCommand>
	
}
    15f8:	2e 96       	adiw	r28, 0x0e	; 14
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <LCD_voidGoToXY>:



void LCD_voidGoToXY(u8 Copy_u8XPosition, u8 Copy_u8YPosition)
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	00 d0       	rcall	.+0      	; 0x1610 <LCD_voidGoToXY+0x6>
    1610:	0f 92       	push	r0
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	8a 83       	std	Y+2, r24	; 0x02
    1618:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address = 0;
    161a:	19 82       	std	Y+1, r1	; 0x01
	/* Check if we are at the first row */
	if(Copy_u8XPosition == 0)
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	88 23       	and	r24, r24
    1620:	19 f4       	brne	.+6      	; 0x1628 <LCD_voidGoToXY+0x1e>
	{
		Local_u8Address = Copy_u8YPosition;
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	06 c0       	rjmp	.+12     	; 0x1634 <LCD_voidGoToXY+0x2a>
	}
	/* Check if we are at the second row */
	else if(Copy_u8XPosition == 1)
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	19 f4       	brne	.+6      	; 0x1634 <LCD_voidGoToXY+0x2a>
	{
		/* Add 0x40 To The Y-Position */
		Local_u8Address = Copy_u8YPosition + 0x40;
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	80 5c       	subi	r24, 0xC0	; 192
    1632:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Set The 8th Bit to be 1 */
	SET_BIT(Local_u8Address, 7);
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	80 68       	ori	r24, 0x80	; 128
    1638:	89 83       	std	Y+1, r24	; 0x01
	/* Send The Set Address Of DDRAM */
	LCD_voidSendCommand(Local_u8Address);
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_voidSendCommand>
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <LCD_voidSendString>:

void LCD_voidSendString(u8 * Copy_pu8String)
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <LCD_voidSendString+0x6>
    1652:	0f 92       	push	r0
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	9b 83       	std	Y+3, r25	; 0x03
    165a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LoopCounter = 0;
    165c:	19 82       	std	Y+1, r1	; 0x01
    165e:	0e c0       	rjmp	.+28     	; 0x167c <LCD_voidSendString+0x30>
	while(Copy_pu8String[Local_u8LoopCounter] != '\0')
	{
		LCD_voidSendData(Copy_pu8String[Local_u8LoopCounter]);
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	9b 81       	ldd	r25, Y+3	; 0x03
    166a:	fc 01       	movw	r30, r24
    166c:	e2 0f       	add	r30, r18
    166e:	f3 1f       	adc	r31, r19
    1670:	80 81       	ld	r24, Z
    1672:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_voidSendData>
		Local_u8LoopCounter++;
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	8f 5f       	subi	r24, 0xFF	; 255
    167a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(u8 * Copy_pu8String)
{
	u8 Local_u8LoopCounter = 0;
	while(Copy_pu8String[Local_u8LoopCounter] != '\0')
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	9b 81       	ldd	r25, Y+3	; 0x03
    1686:	fc 01       	movw	r30, r24
    1688:	e2 0f       	add	r30, r18
    168a:	f3 1f       	adc	r31, r19
    168c:	80 81       	ld	r24, Z
    168e:	88 23       	and	r24, r24
    1690:	39 f7       	brne	.-50     	; 0x1660 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Copy_pu8String[Local_u8LoopCounter]);
		Local_u8LoopCounter++;
	}
}
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <LCD_voidSendCustomCharacter>:
void LCD_voidSendCustomCharacter(
								u8 * Copy_pu8CharacterArray, 
								u8 Copy_u8PatternNum,
								u8 Copy_u8XPosition,
								u8 Copy_u8YPosition)
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	27 97       	sbiw	r28, 0x07	; 7
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	9c 83       	std	Y+4, r25	; 0x04
    16b4:	8b 83       	std	Y+3, r24	; 0x03
    16b6:	6d 83       	std	Y+5, r22	; 0x05
    16b8:	4e 83       	std	Y+6, r20	; 0x06
    16ba:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8LoopCounter;
	u8 Local_u8CGRAMAddress;
	/* Calculate the CGRAM Address = PatternNum * 8 */
	Local_u8CGRAMAddress = Copy_u8PatternNum * 8;
    16bc:	8d 81       	ldd	r24, Y+5	; 0x05
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8CGRAMAddress, 6);
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	80 64       	ori	r24, 0x40	; 64
    16d4:	89 83       	std	Y+1, r24	; 0x01
	/* Send Set CGRAM Address */
	LCD_voidSendCommand(Local_u8CGRAMAddress);
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	0e 94 1e 09 	call	0x123c	; 0x123c <LCD_voidSendCommand>
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    16dc:	1a 82       	std	Y+2, r1	; 0x02
    16de:	0e c0       	rjmp	.+28     	; 0x16fc <LCD_voidSendCustomCharacter+0x5e>
	{
		/* Send Byte from The CharacterArray */
		LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);	
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	fc 01       	movw	r30, r24
    16ec:	e2 0f       	add	r30, r18
    16ee:	f3 1f       	adc	r31, r19
    16f0:	80 81       	ld	r24, Z
    16f2:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_voidSendData>
	/* Calculate the CGRAM Address = PatternNum * 8 */
	Local_u8CGRAMAddress = Copy_u8PatternNum * 8;
	SET_BIT(Local_u8CGRAMAddress, 6);
	/* Send Set CGRAM Address */
	LCD_voidSendCommand(Local_u8CGRAMAddress);
	for(Local_u8LoopCounter = 0; Local_u8LoopCounter < 8; Local_u8LoopCounter++)
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	8f 5f       	subi	r24, 0xFF	; 255
    16fa:	8a 83       	std	Y+2, r24	; 0x02
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	88 30       	cpi	r24, 0x08	; 8
    1700:	78 f3       	brcs	.-34     	; 0x16e0 <LCD_voidSendCustomCharacter+0x42>
	{
		/* Send Byte from The CharacterArray */
		LCD_voidSendData(Copy_pu8CharacterArray[Local_u8LoopCounter]);	
	}
	/* Send The Command To Set DDRAM Address */
	LCD_voidGoToXY(Copy_u8XPosition, Copy_u8YPosition);
    1702:	8e 81       	ldd	r24, Y+6	; 0x06
    1704:	6f 81       	ldd	r22, Y+7	; 0x07
    1706:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_voidGoToXY>
	/* Display the pattern From the CGRAM */ 
	LCD_voidSendData(Copy_u8PatternNum);
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_voidSendData>
}
    1710:	27 96       	adiw	r28, 0x07	; 7
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <KPD_voidInit>:
#include "KPD_interface.h"
#include "KPD_private.h"
#include "KPD_config.h"

void KPD_voidInit(void)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
	/* Set Row Pins to be input */
	DIO_voidSetPinDirection(KPD_PORT, KPD_ROW0_PIN, DIO_INPUT);
    172a:	82 e0       	ldi	r24, 0x02	; 2
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT, KPD_ROW1_PIN, DIO_INPUT);
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	61 e0       	ldi	r22, 0x01	; 1
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT, KPD_ROW2_PIN, DIO_INPUT);
    173e:	82 e0       	ldi	r24, 0x02	; 2
    1740:	62 e0       	ldi	r22, 0x02	; 2
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT, KPD_ROW3_PIN, DIO_INPUT);
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	63 e0       	ldi	r22, 0x03	; 3
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
	
	
	/* set Row Pins To Be Pulled Up */
	DIO_voidSetPinValue(KPD_PORT, KPD_ROW0_PIN, DIO_PULLUP);
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT, KPD_ROW1_PIN, DIO_PULLUP);
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	41 e0       	ldi	r20, 0x01	; 1
    1762:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT, KPD_ROW2_PIN, DIO_PULLUP);
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	62 e0       	ldi	r22, 0x02	; 2
    176a:	41 e0       	ldi	r20, 0x01	; 1
    176c:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT, KPD_ROW3_PIN, DIO_PULLUP);
    1770:	82 e0       	ldi	r24, 0x02	; 2
    1772:	63 e0       	ldi	r22, 0x03	; 3
    1774:	41 e0       	ldi	r20, 0x01	; 1
    1776:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	
	
	/* Set Column Pins to be output */
	DIO_voidSetPinDirection(KPD_PORT, KPD_COLUMN0_PIN, DIO_OUTPUT);
    177a:	82 e0       	ldi	r24, 0x02	; 2
    177c:	64 e0       	ldi	r22, 0x04	; 4
    177e:	41 e0       	ldi	r20, 0x01	; 1
    1780:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT, KPD_COLUMN1_PIN, DIO_OUTPUT);
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	65 e0       	ldi	r22, 0x05	; 5
    1788:	41 e0       	ldi	r20, 0x01	; 1
    178a:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT, KPD_COLUMN2_PIN, DIO_OUTPUT);
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	66 e0       	ldi	r22, 0x06	; 6
    1792:	41 e0       	ldi	r20, 0x01	; 1
    1794:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
	
	
	/* Set Column Pins To Be High */
	DIO_voidSetPinValue(KPD_PORT, KPD_COLUMN0_PIN, DIO_HIGH);
    1798:	82 e0       	ldi	r24, 0x02	; 2
    179a:	64 e0       	ldi	r22, 0x04	; 4
    179c:	41 e0       	ldi	r20, 0x01	; 1
    179e:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT, KPD_COLUMN1_PIN, DIO_HIGH);
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	65 e0       	ldi	r22, 0x05	; 5
    17a6:	41 e0       	ldi	r20, 0x01	; 1
    17a8:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT, KPD_COLUMN2_PIN, DIO_HIGH);
    17ac:	82 e0       	ldi	r24, 0x02	; 2
    17ae:	66 e0       	ldi	r22, 0x06	; 6
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
		u8 Counter;
		for(Counter=0 ;Counter<4; Counter++){
		PW_Array[Counter]= 0xFF;
		}
		*/
}
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <KPD_u8GetPressedKey>:


u8 KPD_u8GetPressedKey(void)
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <KPD_u8GetPressedKey+0x6>
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <KPD_u8GetPressedKey+0x8>
    17c4:	0f 92       	push	r0
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8KPDArray[KPD_ROW_NUM][KPD_COLUMN_NUM] = KPD_ARR_VAL;
	static u8 Local_u8KPDColumnsArray[KPD_COLUMN_NUM] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN};
	static u8 Local_u8KPDRowsArray[KPD_ROW_NUM] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	u8 Local_u8ColumnIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    17ca:	8f ef       	ldi	r24, 0xFF	; 255
    17cc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinState;
	for(Local_u8ColumnIndex = 0; Local_u8ColumnIndex < KPD_COLUMN_NUM; Local_u8ColumnIndex++)
    17ce:	1c 82       	std	Y+4, r1	; 0x04
    17d0:	57 c0       	rjmp	.+174    	; 0x1880 <KPD_u8GetPressedKey+0xc4>
	{
		/* Activate The Column */
		DIO_voidSetPinValue(KPD_PORT, Local_u8KPDColumnsArray[Local_u8ColumnIndex], DIO_LOW);
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	88 2f       	mov	r24, r24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	fc 01       	movw	r30, r24
    17da:	e9 54       	subi	r30, 0x49	; 73
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	90 81       	ld	r25, Z
    17e0:	82 e0       	ldi	r24, 0x02	; 2
    17e2:	69 2f       	mov	r22, r25
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
		/* Loop On The Rows */
		for(Local_u8RowIndex = 0; Local_u8RowIndex < KPD_ROW_NUM; Local_u8RowIndex++)
    17ea:	1b 82       	std	Y+3, r1	; 0x03
    17ec:	37 c0       	rjmp	.+110    	; 0x185c <KPD_u8GetPressedKey+0xa0>
		{
			/* Get The Row Pin State */
			Local_u8PinState = DIO_u8GetPinValue(KPD_PORT, Local_u8KPDRowsArray[Local_u8RowIndex]);
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	88 2f       	mov	r24, r24
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	fc 01       	movw	r30, r24
    17f6:	ed 54       	subi	r30, 0x4D	; 77
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	90 81       	ld	r25, Z
    17fc:	82 e0       	ldi	r24, 0x02	; 2
    17fe:	69 2f       	mov	r22, r25
    1800:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_u8GetPinValue>
    1804:	89 83       	std	Y+1, r24	; 0x01
			/* Check if the Current Row Pin is Low */
			if(Local_u8PinState == DIO_LOW)
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	88 23       	and	r24, r24
    180a:	29 f5       	brne	.+74     	; 0x1856 <KPD_u8GetPressedKey+0x9a>
			{
				/* Get The Pressed Key */
				Local_u8PressedKey = Local_u8KPDArray[Local_u8RowIndex][Local_u8ColumnIndex];
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	48 2f       	mov	r20, r24
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	c9 01       	movw	r24, r18
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	82 0f       	add	r24, r18
    1820:	93 1f       	adc	r25, r19
    1822:	84 0f       	add	r24, r20
    1824:	95 1f       	adc	r25, r21
    1826:	fc 01       	movw	r30, r24
    1828:	e6 54       	subi	r30, 0x46	; 70
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	80 81       	ld	r24, Z
    182e:	8a 83       	std	Y+2, r24	; 0x02
    1830:	0c c0       	rjmp	.+24     	; 0x184a <KPD_u8GetPressedKey+0x8e>
				
				/* Polling (Busy Wait) until the key is released */
				while(Local_u8PinState == DIO_LOW)
				{
					/* Read The Current Row */
					Local_u8PinState = DIO_u8GetPinValue(KPD_PORT, Local_u8KPDRowsArray[Local_u8RowIndex]);
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	88 2f       	mov	r24, r24
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	fc 01       	movw	r30, r24
    183a:	ed 54       	subi	r30, 0x4D	; 77
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	90 81       	ld	r25, Z
    1840:	82 e0       	ldi	r24, 0x02	; 2
    1842:	69 2f       	mov	r22, r25
    1844:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_u8GetPinValue>
    1848:	89 83       	std	Y+1, r24	; 0x01
			{
				/* Get The Pressed Key */
				Local_u8PressedKey = Local_u8KPDArray[Local_u8RowIndex][Local_u8ColumnIndex];
				
				/* Polling (Busy Wait) until the key is released */
				while(Local_u8PinState == DIO_LOW)
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	88 23       	and	r24, r24
    184e:	89 f3       	breq	.-30     	; 0x1832 <KPD_u8GetPressedKey+0x76>
					/* Read The Current Row */
					Local_u8PinState = DIO_u8GetPinValue(KPD_PORT, Local_u8KPDRowsArray[Local_u8RowIndex]);
				}
				
				/* Return the Pressed Key and Exit the function */
				return Local_u8PressedKey;
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	8d 83       	std	Y+5, r24	; 0x05
    1854:	1b c0       	rjmp	.+54     	; 0x188c <KPD_u8GetPressedKey+0xd0>
	for(Local_u8ColumnIndex = 0; Local_u8ColumnIndex < KPD_COLUMN_NUM; Local_u8ColumnIndex++)
	{
		/* Activate The Column */
		DIO_voidSetPinValue(KPD_PORT, Local_u8KPDColumnsArray[Local_u8ColumnIndex], DIO_LOW);
		/* Loop On The Rows */
		for(Local_u8RowIndex = 0; Local_u8RowIndex < KPD_ROW_NUM; Local_u8RowIndex++)
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	8f 5f       	subi	r24, 0xFF	; 255
    185a:	8b 83       	std	Y+3, r24	; 0x03
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	84 30       	cpi	r24, 0x04	; 4
    1860:	30 f2       	brcs	.-116    	; 0x17ee <KPD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}
		}
		
		/* Deactivate The Current Column */
		DIO_voidSetPinValue(KPD_PORT, Local_u8KPDColumnsArray[Local_u8ColumnIndex], DIO_HIGH);
    1862:	8c 81       	ldd	r24, Y+4	; 0x04
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	fc 01       	movw	r30, r24
    186a:	e9 54       	subi	r30, 0x49	; 73
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	90 81       	ld	r25, Z
    1870:	82 e0       	ldi	r24, 0x02	; 2
    1872:	69 2f       	mov	r22, r25
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	static u8 Local_u8KPDRowsArray[KPD_ROW_NUM] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	u8 Local_u8ColumnIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
	u8 Local_u8PinState;
	for(Local_u8ColumnIndex = 0; Local_u8ColumnIndex < KPD_COLUMN_NUM; Local_u8ColumnIndex++)
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	8f 5f       	subi	r24, 0xFF	; 255
    187e:	8c 83       	std	Y+4, r24	; 0x04
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	83 30       	cpi	r24, 0x03	; 3
    1884:	08 f4       	brcc	.+2      	; 0x1888 <KPD_u8GetPressedKey+0xcc>
    1886:	a5 cf       	rjmp	.-182    	; 0x17d2 <KPD_u8GetPressedKey+0x16>
		/* Deactivate The Current Column */
		DIO_voidSetPinValue(KPD_PORT, Local_u8KPDColumnsArray[Local_u8ColumnIndex], DIO_HIGH);
	}
	
	/* No Key Pressed, Then Return The Initial Value */
	return Local_u8PressedKey;
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	8d 83       	std	Y+5, r24	; 0x05
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <KPD_PWEnable>:


u8 KPD_PWEnable(){
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
#if EnableState == Enable
	return 1;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
#elif EnableState == Disable
	return 0;
#endif
}
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <KPD_SetPW>:

u8 KPD_SetPW()
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	0f 92       	push	r0
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
#define   first_num        4
#define   second_num       5
#define   third_num        6
}
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <stop_door>:
#define F_CPU 8000000UL
#include <util/delay.h>

#define MAX_TRIES 2

void stop_door(){
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORTA,PIN3,DIO_LOW);
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	63 e0       	ldi	r22, 0x03	; 3
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTA,PIN4,DIO_LOW);
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	64 e0       	ldi	r22, 0x04	; 4
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
}
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <open_door>:

void open_door(){
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	6c 97       	sbiw	r28, 0x1c	; 28
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(PORTA,PIN3,DIO_HIGH);
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	63 e0       	ldi	r22, 0x03	; 3
    18fa:	41 e0       	ldi	r20, 0x01	; 1
    18fc:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTA,PIN4,DIO_LOW);
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	64 e0       	ldi	r22, 0x04	; 4
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTA,PIN7,DIO_HIGH);
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	67 e0       	ldi	r22, 0x07	; 7
    190e:	41 e0       	ldi	r20, 0x01	; 1
    1910:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTA,PIN5,DIO_HIGH); //buzzer
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	65 e0       	ldi	r22, 0x05	; 5
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	a8 ec       	ldi	r26, 0xC8	; 200
    1924:	b2 e4       	ldi	r27, 0x42	; 66
    1926:	89 8f       	std	Y+25, r24	; 0x19
    1928:	9a 8f       	std	Y+26, r25	; 0x1a
    192a:	ab 8f       	std	Y+27, r26	; 0x1b
    192c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192e:	69 8d       	ldd	r22, Y+25	; 0x19
    1930:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1932:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1934:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	4a ef       	ldi	r20, 0xFA	; 250
    193c:	54 e4       	ldi	r21, 0x44	; 68
    193e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	8d 8b       	std	Y+21, r24	; 0x15
    1948:	9e 8b       	std	Y+22, r25	; 0x16
    194a:	af 8b       	std	Y+23, r26	; 0x17
    194c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    194e:	6d 89       	ldd	r22, Y+21	; 0x15
    1950:	7e 89       	ldd	r23, Y+22	; 0x16
    1952:	8f 89       	ldd	r24, Y+23	; 0x17
    1954:	98 8d       	ldd	r25, Y+24	; 0x18
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e8       	ldi	r20, 0x80	; 128
    195c:	5f e3       	ldi	r21, 0x3F	; 63
    195e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1962:	88 23       	and	r24, r24
    1964:	2c f4       	brge	.+10     	; 0x1970 <open_door+0x8e>
		__ticks = 1;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	9c 8b       	std	Y+20, r25	; 0x14
    196c:	8b 8b       	std	Y+19, r24	; 0x13
    196e:	3f c0       	rjmp	.+126    	; 0x19ee <open_door+0x10c>
	else if (__tmp > 65535)
    1970:	6d 89       	ldd	r22, Y+21	; 0x15
    1972:	7e 89       	ldd	r23, Y+22	; 0x16
    1974:	8f 89       	ldd	r24, Y+23	; 0x17
    1976:	98 8d       	ldd	r25, Y+24	; 0x18
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	3f ef       	ldi	r19, 0xFF	; 255
    197c:	4f e7       	ldi	r20, 0x7F	; 127
    197e:	57 e4       	ldi	r21, 0x47	; 71
    1980:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1984:	18 16       	cp	r1, r24
    1986:	4c f5       	brge	.+82     	; 0x19da <open_door+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1988:	69 8d       	ldd	r22, Y+25	; 0x19
    198a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    198c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e2       	ldi	r20, 0x20	; 32
    1996:	51 e4       	ldi	r21, 0x41	; 65
    1998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	9c 8b       	std	Y+20, r25	; 0x14
    19ae:	8b 8b       	std	Y+19, r24	; 0x13
    19b0:	0f c0       	rjmp	.+30     	; 0x19d0 <open_door+0xee>
    19b2:	88 ec       	ldi	r24, 0xC8	; 200
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	9a 8b       	std	Y+18, r25	; 0x12
    19b8:	89 8b       	std	Y+17, r24	; 0x11
    19ba:	89 89       	ldd	r24, Y+17	; 0x11
    19bc:	9a 89       	ldd	r25, Y+18	; 0x12
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <open_door+0xdc>
    19c2:	9a 8b       	std	Y+18, r25	; 0x12
    19c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c6:	8b 89       	ldd	r24, Y+19	; 0x13
    19c8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	9c 8b       	std	Y+20, r25	; 0x14
    19ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d0:	8b 89       	ldd	r24, Y+19	; 0x13
    19d2:	9c 89       	ldd	r25, Y+20	; 0x14
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	69 f7       	brne	.-38     	; 0x19b2 <open_door+0xd0>
    19d8:	14 c0       	rjmp	.+40     	; 0x1a02 <open_door+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19da:	6d 89       	ldd	r22, Y+21	; 0x15
    19dc:	7e 89       	ldd	r23, Y+22	; 0x16
    19de:	8f 89       	ldd	r24, Y+23	; 0x17
    19e0:	98 8d       	ldd	r25, Y+24	; 0x18
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	9c 8b       	std	Y+20, r25	; 0x14
    19ec:	8b 8b       	std	Y+19, r24	; 0x13
    19ee:	8b 89       	ldd	r24, Y+19	; 0x13
    19f0:	9c 89       	ldd	r25, Y+20	; 0x14
    19f2:	98 8b       	std	Y+16, r25	; 0x10
    19f4:	8f 87       	std	Y+15, r24	; 0x0f
    19f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f8:	98 89       	ldd	r25, Y+16	; 0x10
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <open_door+0x118>
    19fe:	98 8b       	std	Y+16, r25	; 0x10
    1a00:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	DIO_voidSetPinValue(PORTA,PIN5,DIO_LOW);
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	65 e0       	ldi	r22, 0x05	; 5
    1a06:	40 e0       	ldi	r20, 0x00	; 0
    1a08:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e8       	ldi	r25, 0x80	; 128
    1a10:	ad ee       	ldi	r26, 0xED	; 237
    1a12:	b4 e4       	ldi	r27, 0x44	; 68
    1a14:	8b 87       	std	Y+11, r24	; 0x0b
    1a16:	9c 87       	std	Y+12, r25	; 0x0c
    1a18:	ad 87       	std	Y+13, r26	; 0x0d
    1a1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	4a ef       	ldi	r20, 0xFA	; 250
    1a2a:	54 e4       	ldi	r21, 0x44	; 68
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	8f 83       	std	Y+7, r24	; 0x07
    1a36:	98 87       	std	Y+8, r25	; 0x08
    1a38:	a9 87       	std	Y+9, r26	; 0x09
    1a3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3e:	78 85       	ldd	r23, Y+8	; 0x08
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e8       	ldi	r20, 0x80	; 128
    1a4a:	5f e3       	ldi	r21, 0x3F	; 63
    1a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a50:	88 23       	and	r24, r24
    1a52:	2c f4       	brge	.+10     	; 0x1a5e <open_door+0x17c>
		__ticks = 1;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
    1a5c:	3f c0       	rjmp	.+126    	; 0x1adc <open_door+0x1fa>
	else if (__tmp > 65535)
    1a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a60:	78 85       	ldd	r23, Y+8	; 0x08
    1a62:	89 85       	ldd	r24, Y+9	; 0x09
    1a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	3f ef       	ldi	r19, 0xFF	; 255
    1a6a:	4f e7       	ldi	r20, 0x7F	; 127
    1a6c:	57 e4       	ldi	r21, 0x47	; 71
    1a6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a72:	18 16       	cp	r1, r24
    1a74:	4c f5       	brge	.+82     	; 0x1ac8 <open_door+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	0f c0       	rjmp	.+30     	; 0x1abe <open_door+0x1dc>
    1aa0:	88 ec       	ldi	r24, 0xC8	; 200
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9c 83       	std	Y+4, r25	; 0x04
    1aa6:	8b 83       	std	Y+3, r24	; 0x03
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <open_door+0x1ca>
    1ab0:	9c 83       	std	Y+4, r25	; 0x04
    1ab2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	69 f7       	brne	.-38     	; 0x1aa0 <open_door+0x1be>
    1ac6:	14 c0       	rjmp	.+40     	; 0x1af0 <open_door+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aca:	78 85       	ldd	r23, Y+8	; 0x08
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	9e 83       	std	Y+6, r25	; 0x06
    1ada:	8d 83       	std	Y+5, r24	; 0x05
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae0:	9a 83       	std	Y+2, r25	; 0x02
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <open_door+0x206>
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000-100);
	stop_door();
    1af0:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <stop_door>
}
    1af4:	6c 96       	adiw	r28, 0x1c	; 28
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <close_door>:

void close_door(){
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	2e 97       	sbiw	r28, 0x0e	; 14
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(PORTA,PIN3,DIO_LOW);
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	63 e0       	ldi	r22, 0x03	; 3
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTA,PIN4,DIO_HIGH);
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	64 e0       	ldi	r22, 0x04	; 4
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	aa ef       	ldi	r26, 0xFA	; 250
    1b34:	b4 e4       	ldi	r27, 0x44	; 68
    1b36:	8b 87       	std	Y+11, r24	; 0x0b
    1b38:	9c 87       	std	Y+12, r25	; 0x0c
    1b3a:	ad 87       	std	Y+13, r26	; 0x0d
    1b3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	4a ef       	ldi	r20, 0xFA	; 250
    1b4c:	54 e4       	ldi	r21, 0x44	; 68
    1b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	8f 83       	std	Y+7, r24	; 0x07
    1b58:	98 87       	std	Y+8, r25	; 0x08
    1b5a:	a9 87       	std	Y+9, r26	; 0x09
    1b5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b60:	78 85       	ldd	r23, Y+8	; 0x08
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
    1b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e8       	ldi	r20, 0x80	; 128
    1b6c:	5f e3       	ldi	r21, 0x3F	; 63
    1b6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b72:	88 23       	and	r24, r24
    1b74:	2c f4       	brge	.+10     	; 0x1b80 <close_door+0x7a>
		__ticks = 1;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
    1b7e:	3f c0       	rjmp	.+126    	; 0x1bfe <close_door+0xf8>
	else if (__tmp > 65535)
    1b80:	6f 81       	ldd	r22, Y+7	; 0x07
    1b82:	78 85       	ldd	r23, Y+8	; 0x08
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	3f ef       	ldi	r19, 0xFF	; 255
    1b8c:	4f e7       	ldi	r20, 0x7F	; 127
    1b8e:	57 e4       	ldi	r21, 0x47	; 71
    1b90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b94:	18 16       	cp	r1, r24
    1b96:	4c f5       	brge	.+82     	; 0x1bea <close_door+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e2       	ldi	r20, 0x20	; 32
    1ba6:	51 e4       	ldi	r21, 0x41	; 65
    1ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9e 83       	std	Y+6, r25	; 0x06
    1bbe:	8d 83       	std	Y+5, r24	; 0x05
    1bc0:	0f c0       	rjmp	.+30     	; 0x1be0 <close_door+0xda>
    1bc2:	88 ec       	ldi	r24, 0xC8	; 200
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	9c 83       	std	Y+4, r25	; 0x04
    1bc8:	8b 83       	std	Y+3, r24	; 0x03
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <close_door+0xc8>
    1bd2:	9c 83       	std	Y+4, r25	; 0x04
    1bd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	9e 81       	ldd	r25, Y+6	; 0x06
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	69 f7       	brne	.-38     	; 0x1bc2 <close_door+0xbc>
    1be8:	14 c0       	rjmp	.+40     	; 0x1c12 <close_door+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bea:	6f 81       	ldd	r22, Y+7	; 0x07
    1bec:	78 85       	ldd	r23, Y+8	; 0x08
    1bee:	89 85       	ldd	r24, Y+9	; 0x09
    1bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
    1bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1c00:	9e 81       	ldd	r25, Y+6	; 0x06
    1c02:	9a 83       	std	Y+2, r25	; 0x02
    1c04:	89 83       	std	Y+1, r24	; 0x01
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <close_door+0x104>
    1c0e:	9a 83       	std	Y+2, r25	; 0x02
    1c10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	stop_door();
    1c12:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <stop_door>
	DIO_voidSetPinValue(PORTA,PIN7,DIO_LOW);
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	67 e0       	ldi	r22, 0x07	; 7
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
}
    1c20:	2e 96       	adiw	r28, 0x0e	; 14
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <main>:



void main(void)
{
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	ed 97       	sbiw	r28, 0x3d	; 61
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
	LCD_voidInit();
    1c46:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <LCD_voidInit>
	KPD_voidInit();
    1c4a:	0e 94 91 0b 	call	0x1722	; 0x1722 <KPD_voidInit>

	u8 Local_u8Key;

	u8 Flag=0;
    1c4e:	19 aa       	std	Y+49, r1	; 0x31
	u8 arr[3];
	u8 arr2[3]={4,5,6};
    1c50:	ce 01       	movw	r24, r28
    1c52:	c6 96       	adiw	r24, 0x36	; 54
    1c54:	9a af       	std	Y+58, r25	; 0x3a
    1c56:	89 af       	std	Y+57, r24	; 0x39
    1c58:	e6 ec       	ldi	r30, 0xC6	; 198
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	fc af       	std	Y+60, r31	; 0x3c
    1c5e:	eb af       	std	Y+59, r30	; 0x3b
    1c60:	f3 e0       	ldi	r31, 0x03	; 3
    1c62:	fd af       	std	Y+61, r31	; 0x3d
    1c64:	eb ad       	ldd	r30, Y+59	; 0x3b
    1c66:	fc ad       	ldd	r31, Y+60	; 0x3c
    1c68:	00 80       	ld	r0, Z
    1c6a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c6c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	9c af       	std	Y+60, r25	; 0x3c
    1c72:	8b af       	std	Y+59, r24	; 0x3b
    1c74:	e9 ad       	ldd	r30, Y+57	; 0x39
    1c76:	fa ad       	ldd	r31, Y+58	; 0x3a
    1c78:	00 82       	st	Z, r0
    1c7a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c7c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	9a af       	std	Y+58, r25	; 0x3a
    1c82:	89 af       	std	Y+57, r24	; 0x39
    1c84:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c86:	91 50       	subi	r25, 0x01	; 1
    1c88:	9d af       	std	Y+61, r25	; 0x3d
    1c8a:	ed ad       	ldd	r30, Y+61	; 0x3d
    1c8c:	ee 23       	and	r30, r30
    1c8e:	51 f7       	brne	.-44     	; 0x1c64 <main+0x32>
	u8 Counter=0;
    1c90:	18 aa       	std	Y+48, r1	; 0x30
	DIO_voidSetPinDirection(PORTA,PIN3,DIO_OUTPUT);
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	63 e0       	ldi	r22, 0x03	; 3
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA,PIN4,DIO_OUTPUT);
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	64 e0       	ldi	r22, 0x04	; 4
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA,PIN5,DIO_OUTPUT);
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	65 e0       	ldi	r22, 0x05	; 5
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA,PIN7,DIO_OUTPUT);
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	67 e0       	ldi	r22, 0x07	; 7
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN0,DIO_INPUT);
    1cba:	83 e0       	ldi	r24, 0x03	; 3
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	0e 94 35 06 	call	0xc6a	; 0xc6a <DIO_voidSetPinDirection>
	u8 px=0, pcounter=0, ptries=0;
    1cc4:	1f a6       	std	Y+47, r1	; 0x2f
    1cc6:	1e a6       	std	Y+46, r1	; 0x2e
    1cc8:	1d a6       	std	Y+45, r1	; 0x2d
	while(1)
	{

		if(DIO_u8GetPinValue(PORTD,PIN0)==DIO_LOW){
    1cca:	83 e0       	ldi	r24, 0x03	; 3
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_u8GetPinValue>
    1cd2:	88 23       	and	r24, r24
    1cd4:	31 f4       	brne	.+12     	; 0x1ce2 <main+0xb0>
			LCD_voidClearDisplay();
    1cd6:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCD_voidClearDisplay>
			px=0;
    1cda:	1f a6       	std	Y+47, r1	; 0x2f
			pcounter=0;
    1cdc:	1e a6       	std	Y+46, r1	; 0x2e
			ptries=0;
    1cde:	1d a6       	std	Y+45, r1	; 0x2d
    1ce0:	f4 cf       	rjmp	.-24     	; 0x1cca <main+0x98>
			continue;
		}

		LCD_voidGoToXY(0,0);
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_voidGoToXY>
		LCD_voidSendString("enter pass code: ");
    1cea:	80 e6       	ldi	r24, 0x60	; 96
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 26 0b 	call	0x164c	; 0x164c <LCD_voidSendString>
		do
		{
			Local_u8Key = KPD_u8GetPressedKey();
    1cf2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <KPD_u8GetPressedKey>
    1cf6:	8a ab       	std	Y+50, r24	; 0x32
		}while(Local_u8Key == 0xFF);
    1cf8:	8a a9       	ldd	r24, Y+50	; 0x32
    1cfa:	8f 3f       	cpi	r24, 0xFF	; 255
    1cfc:	d1 f3       	breq	.-12     	; 0x1cf2 <main+0xc0>

		pcounter++;
    1cfe:	8e a5       	ldd	r24, Y+46	; 0x2e
    1d00:	8f 5f       	subi	r24, 0xFF	; 255
    1d02:	8e a7       	std	Y+46, r24	; 0x2e
		arr[px] = Local_u8Key;
    1d04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	c3 96       	adiw	r24, 0x33	; 51
    1d0e:	fc 01       	movw	r30, r24
    1d10:	e2 0f       	add	r30, r18
    1d12:	f3 1f       	adc	r31, r19
    1d14:	8a a9       	ldd	r24, Y+50	; 0x32
    1d16:	80 83       	st	Z, r24
		LCD_voidGoToXY(1,px+3);
    1d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1a:	98 2f       	mov	r25, r24
    1d1c:	9d 5f       	subi	r25, 0xFD	; 253
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	69 2f       	mov	r22, r25
    1d22:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_voidGoToXY>
		LCD_voidSendData(Local_u8Key + '0');
    1d26:	8a a9       	ldd	r24, Y+50	; 0x32
    1d28:	80 5d       	subi	r24, 0xD0	; 208
    1d2a:	0e 94 c6 09 	call	0x138c	; 0x138c <LCD_voidSendData>
		px++;
    1d2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	8f a7       	std	Y+47, r24	; 0x2f



		if(pcounter == 3){
    1d34:	8e a5       	ldd	r24, Y+46	; 0x2e
    1d36:	83 30       	cpi	r24, 0x03	; 3
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <main+0x10a>
    1d3a:	c2 c0       	rjmp	.+388    	; 0x1ec0 <main+0x28e>

			Flag = 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	89 ab       	std	Y+49, r24	; 0x31
			for(int i=0; i<3;i++){
    1d40:	1c a6       	std	Y+44, r1	; 0x2c
    1d42:	1b a6       	std	Y+43, r1	; 0x2b
    1d44:	18 c0       	rjmp	.+48     	; 0x1d76 <main+0x144>
				if(arr[i]!=arr2[i])
    1d46:	2b a5       	ldd	r18, Y+43	; 0x2b
    1d48:	3c a5       	ldd	r19, Y+44	; 0x2c
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	c3 96       	adiw	r24, 0x33	; 51
    1d4e:	fc 01       	movw	r30, r24
    1d50:	e2 0f       	add	r30, r18
    1d52:	f3 1f       	adc	r31, r19
    1d54:	40 81       	ld	r20, Z
    1d56:	2b a5       	ldd	r18, Y+43	; 0x2b
    1d58:	3c a5       	ldd	r19, Y+44	; 0x2c
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	c6 96       	adiw	r24, 0x36	; 54
    1d5e:	fc 01       	movw	r30, r24
    1d60:	e2 0f       	add	r30, r18
    1d62:	f3 1f       	adc	r31, r19
    1d64:	80 81       	ld	r24, Z
    1d66:	48 17       	cp	r20, r24
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <main+0x13a>
					Flag = 0;
    1d6a:	19 aa       	std	Y+49, r1	; 0x31


		if(pcounter == 3){

			Flag = 1;
			for(int i=0; i<3;i++){
    1d6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d70:	01 96       	adiw	r24, 0x01	; 1
    1d72:	9c a7       	std	Y+44, r25	; 0x2c
    1d74:	8b a7       	std	Y+43, r24	; 0x2b
    1d76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d78:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d7a:	83 30       	cpi	r24, 0x03	; 3
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	1c f3       	brlt	.-58     	; 0x1d46 <main+0x114>
				if(arr[i]!=arr2[i])
					Flag = 0;
			}

			if(Flag == 1){
    1d80:	89 a9       	ldd	r24, Y+49	; 0x31
    1d82:	81 30       	cpi	r24, 0x01	; 1
    1d84:	d1 f4       	brne	.+52     	; 0x1dba <main+0x188>
				LCD_voidClearDisplay();
    1d86:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCD_voidClearDisplay>
				LCD_voidSendString("Welcome Home");
    1d8a:	82 e7       	ldi	r24, 0x72	; 114
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 26 0b 	call	0x164c	; 0x164c <LCD_voidSendString>
				LCD_voidGoToXY(1,0);
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_voidGoToXY>
				LCD_voidSendString("Door Is Open");
    1d9a:	8f e7       	ldi	r24, 0x7F	; 127
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	0e 94 26 0b 	call	0x164c	; 0x164c <LCD_voidSendString>
				ptries=0;
    1da2:	1d a6       	std	Y+45, r1	; 0x2d
				open_door();
    1da4:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <open_door>
				while((DIO_u8GetPinValue(PORTD,PIN0)==DIO_HIGH));
    1da8:	83 e0       	ldi	r24, 0x03	; 3
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_u8GetPinValue>
    1db0:	81 30       	cpi	r24, 0x01	; 1
    1db2:	d1 f3       	breq	.-12     	; 0x1da8 <main+0x176>
				close_door();
    1db4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <close_door>
    1db8:	83 c0       	rjmp	.+262    	; 0x1ec0 <main+0x28e>
			}
			else{
				ptries++;
    1dba:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dbc:	8f 5f       	subi	r24, 0xFF	; 255
    1dbe:	8d a7       	std	Y+45, r24	; 0x2d
				LCD_voidClearDisplay();
    1dc0:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCD_voidClearDisplay>
				LCD_voidGoToXY(0,0);
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_voidGoToXY>
				LCD_voidSendString("Wrong pass code ");
    1dcc:	8c e8       	ldi	r24, 0x8C	; 140
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 94 26 0b 	call	0x164c	; 0x164c <LCD_voidSendString>
				px=0;
    1dd4:	1f a6       	std	Y+47, r1	; 0x2f
				pcounter=0;
    1dd6:	1e a6       	std	Y+46, r1	; 0x2e
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	aa e7       	ldi	r26, 0x7A	; 122
    1dde:	b4 e4       	ldi	r27, 0x44	; 68
    1de0:	8f a3       	std	Y+39, r24	; 0x27
    1de2:	98 a7       	std	Y+40, r25	; 0x28
    1de4:	a9 a7       	std	Y+41, r26	; 0x29
    1de6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	6f a1       	ldd	r22, Y+39	; 0x27
    1dea:	78 a5       	ldd	r23, Y+40	; 0x28
    1dec:	89 a5       	ldd	r24, Y+41	; 0x29
    1dee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a ef       	ldi	r20, 0xFA	; 250
    1df6:	54 e4       	ldi	r21, 0x44	; 68
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	8b a3       	std	Y+35, r24	; 0x23
    1e02:	9c a3       	std	Y+36, r25	; 0x24
    1e04:	ad a3       	std	Y+37, r26	; 0x25
    1e06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e08:	6b a1       	ldd	r22, Y+35	; 0x23
    1e0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <main+0x1f8>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9a a3       	std	Y+34, r25	; 0x22
    1e26:	89 a3       	std	Y+33, r24	; 0x21
    1e28:	3f c0       	rjmp	.+126    	; 0x1ea8 <main+0x276>
	else if (__tmp > 65535)
    1e2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e30:	9e a1       	ldd	r25, Y+38	; 0x26
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	4c f5       	brge	.+82     	; 0x1e94 <main+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	6f a1       	ldd	r22, Y+39	; 0x27
    1e44:	78 a5       	ldd	r23, Y+40	; 0x28
    1e46:	89 a5       	ldd	r24, Y+41	; 0x29
    1e48:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9a a3       	std	Y+34, r25	; 0x22
    1e68:	89 a3       	std	Y+33, r24	; 0x21
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <main+0x258>
    1e6c:	88 ec       	ldi	r24, 0xC8	; 200
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	98 a3       	std	Y+32, r25	; 0x20
    1e72:	8f 8f       	std	Y+31, r24	; 0x1f
    1e74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e76:	98 a1       	ldd	r25, Y+32	; 0x20
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <main+0x246>
    1e7c:	98 a3       	std	Y+32, r25	; 0x20
    1e7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e80:	89 a1       	ldd	r24, Y+33	; 0x21
    1e82:	9a a1       	ldd	r25, Y+34	; 0x22
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	9a a3       	std	Y+34, r25	; 0x22
    1e88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f7       	brne	.-38     	; 0x1e6c <main+0x23a>
    1e92:	14 c0       	rjmp	.+40     	; 0x1ebc <main+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e94:	6b a1       	ldd	r22, Y+35	; 0x23
    1e96:	7c a1       	ldd	r23, Y+36	; 0x24
    1e98:	8d a1       	ldd	r24, Y+37	; 0x25
    1e9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9a a3       	std	Y+34, r25	; 0x22
    1ea6:	89 a3       	std	Y+33, r24	; 0x21
    1ea8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eaa:	9a a1       	ldd	r25, Y+34	; 0x22
    1eac:	9e 8f       	std	Y+30, r25	; 0x1e
    1eae:	8d 8f       	std	Y+29, r24	; 0x1d
    1eb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <main+0x282>
    1eb8:	9e 8f       	std	Y+30, r25	; 0x1e
    1eba:	8d 8f       	std	Y+29, r24	; 0x1d
//				DIO_voidSetPinValue(PORTA,PIN3,DIO_LOW);
				_delay_ms(1000);
				LCD_voidClearDisplay();
    1ebc:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCD_voidClearDisplay>
			}


		}

		if(ptries == MAX_TRIES){
    1ec0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ec2:	82 30       	cpi	r24, 0x02	; 2
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <main+0x296>
    1ec6:	01 cf       	rjmp	.-510    	; 0x1cca <main+0x98>
			LCD_voidClearDisplay();
    1ec8:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCD_voidClearDisplay>
			LCD_voidGoToXY(0,0);
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	0e 94 05 0b 	call	0x160a	; 0x160a <LCD_voidGoToXY>
			LCD_voidSendString("LOCKING DOOR!");
    1ed4:	8d e9       	ldi	r24, 0x9D	; 157
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	0e 94 26 0b 	call	0x164c	; 0x164c <LCD_voidSendString>
		}

	}

	while(1){
		DIO_voidSetPinValue(PORTA,PIN5,DIO_HIGH); //buzzer
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	65 e0       	ldi	r22, 0x05	; 5
    1ee0:	41 e0       	ldi	r20, 0x01	; 1
    1ee2:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a8 ec       	ldi	r26, 0xC8	; 200
    1eec:	b2 e4       	ldi	r27, 0x42	; 66
    1eee:	89 8f       	std	Y+25, r24	; 0x19
    1ef0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ef2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ef4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ef8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1efa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1efc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a ef       	ldi	r20, 0xFA	; 250
    1f04:	54 e4       	ldi	r21, 0x44	; 68
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	8d 8b       	std	Y+21, r24	; 0x15
    1f10:	9e 8b       	std	Y+22, r25	; 0x16
    1f12:	af 8b       	std	Y+23, r26	; 0x17
    1f14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f16:	6d 89       	ldd	r22, Y+21	; 0x15
    1f18:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <main+0x306>
		__ticks = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9c 8b       	std	Y+20, r25	; 0x14
    1f34:	8b 8b       	std	Y+19, r24	; 0x13
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <main+0x384>
	else if (__tmp > 65535)
    1f38:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	3f ef       	ldi	r19, 0xFF	; 255
    1f44:	4f e7       	ldi	r20, 0x7F	; 127
    1f46:	57 e4       	ldi	r21, 0x47	; 71
    1f48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	4c f5       	brge	.+82     	; 0x1fa2 <main+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	69 8d       	ldd	r22, Y+25	; 0x19
    1f52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9c 8b       	std	Y+20, r25	; 0x14
    1f76:	8b 8b       	std	Y+19, r24	; 0x13
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <main+0x366>
    1f7a:	88 ec       	ldi	r24, 0xC8	; 200
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9a 8b       	std	Y+18, r25	; 0x12
    1f80:	89 8b       	std	Y+17, r24	; 0x11
    1f82:	89 89       	ldd	r24, Y+17	; 0x11
    1f84:	9a 89       	ldd	r25, Y+18	; 0x12
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <main+0x354>
    1f8a:	9a 8b       	std	Y+18, r25	; 0x12
    1f8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f90:	9c 89       	ldd	r25, Y+20	; 0x14
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	9c 8b       	std	Y+20, r25	; 0x14
    1f96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f98:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <main+0x348>
    1fa0:	14 c0       	rjmp	.+40     	; 0x1fca <main+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9c 8b       	std	Y+20, r25	; 0x14
    1fb4:	8b 8b       	std	Y+19, r24	; 0x13
    1fb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fba:	98 8b       	std	Y+16, r25	; 0x10
    1fbc:	8f 87       	std	Y+15, r24	; 0x0f
    1fbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc0:	98 89       	ldd	r25, Y+16	; 0x10
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <main+0x390>
    1fc6:	98 8b       	std	Y+16, r25	; 0x10
    1fc8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		DIO_voidSetPinValue(PORTA,PIN5,DIO_LOW);
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	65 e0       	ldi	r22, 0x05	; 5
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	0e 94 18 07 	call	0xe30	; 0xe30 <DIO_voidSetPinValue>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a8 ec       	ldi	r26, 0xC8	; 200
    1fda:	b2 e4       	ldi	r27, 0x42	; 66
    1fdc:	8b 87       	std	Y+11, r24	; 0x0b
    1fde:	9c 87       	std	Y+12, r25	; 0x0c
    1fe0:	ad 87       	std	Y+13, r26	; 0x0d
    1fe2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4a ef       	ldi	r20, 0xFA	; 250
    1ff2:	54 e4       	ldi	r21, 0x44	; 68
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	8f 83       	std	Y+7, r24	; 0x07
    1ffe:	98 87       	std	Y+8, r25	; 0x08
    2000:	a9 87       	std	Y+9, r26	; 0x09
    2002:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2004:	6f 81       	ldd	r22, Y+7	; 0x07
    2006:	78 85       	ldd	r23, Y+8	; 0x08
    2008:	89 85       	ldd	r24, Y+9	; 0x09
    200a:	9a 85       	ldd	r25, Y+10	; 0x0a
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2018:	88 23       	and	r24, r24
    201a:	2c f4       	brge	.+10     	; 0x2026 <main+0x3f4>
		__ticks = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9e 83       	std	Y+6, r25	; 0x06
    2022:	8d 83       	std	Y+5, r24	; 0x05
    2024:	3f c0       	rjmp	.+126    	; 0x20a4 <main+0x472>
	else if (__tmp > 65535)
    2026:	6f 81       	ldd	r22, Y+7	; 0x07
    2028:	78 85       	ldd	r23, Y+8	; 0x08
    202a:	89 85       	ldd	r24, Y+9	; 0x09
    202c:	9a 85       	ldd	r25, Y+10	; 0x0a
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	4c f5       	brge	.+82     	; 0x2090 <main+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2040:	7c 85       	ldd	r23, Y+12	; 0x0c
    2042:	8d 85       	ldd	r24, Y+13	; 0x0d
    2044:	9e 85       	ldd	r25, Y+14	; 0x0e
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e2       	ldi	r20, 0x20	; 32
    204c:	51 e4       	ldi	r21, 0x41	; 65
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	bc 01       	movw	r22, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9e 83       	std	Y+6, r25	; 0x06
    2064:	8d 83       	std	Y+5, r24	; 0x05
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <main+0x454>
    2068:	88 ec       	ldi	r24, 0xC8	; 200
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	9c 83       	std	Y+4, r25	; 0x04
    206e:	8b 83       	std	Y+3, r24	; 0x03
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	9c 81       	ldd	r25, Y+4	; 0x04
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <main+0x442>
    2078:	9c 83       	std	Y+4, r25	; 0x04
    207a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	9e 81       	ldd	r25, Y+6	; 0x06
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	69 f7       	brne	.-38     	; 0x2068 <main+0x436>
    208e:	26 cf       	rjmp	.-436    	; 0x1edc <main+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2090:	6f 81       	ldd	r22, Y+7	; 0x07
    2092:	78 85       	ldd	r23, Y+8	; 0x08
    2094:	89 85       	ldd	r24, Y+9	; 0x09
    2096:	9a 85       	ldd	r25, Y+10	; 0x0a
    2098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9e 83       	std	Y+6, r25	; 0x06
    20a2:	8d 83       	std	Y+5, r24	; 0x05
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	9e 81       	ldd	r25, Y+6	; 0x06
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	9a 81       	ldd	r25, Y+2	; 0x02
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <main+0x47e>
    20b4:	9a 83       	std	Y+2, r25	; 0x02
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	11 cf       	rjmp	.-478    	; 0x1edc <main+0x2aa>

000020ba <__prologue_saves__>:
    20ba:	2f 92       	push	r2
    20bc:	3f 92       	push	r3
    20be:	4f 92       	push	r4
    20c0:	5f 92       	push	r5
    20c2:	6f 92       	push	r6
    20c4:	7f 92       	push	r7
    20c6:	8f 92       	push	r8
    20c8:	9f 92       	push	r9
    20ca:	af 92       	push	r10
    20cc:	bf 92       	push	r11
    20ce:	cf 92       	push	r12
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	ca 1b       	sub	r28, r26
    20e4:	db 0b       	sbc	r29, r27
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	09 94       	ijmp

000020f2 <__epilogue_restores__>:
    20f2:	2a 88       	ldd	r2, Y+18	; 0x12
    20f4:	39 88       	ldd	r3, Y+17	; 0x11
    20f6:	48 88       	ldd	r4, Y+16	; 0x10
    20f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    20fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    20fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    20fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2100:	9b 84       	ldd	r9, Y+11	; 0x0b
    2102:	aa 84       	ldd	r10, Y+10	; 0x0a
    2104:	b9 84       	ldd	r11, Y+9	; 0x09
    2106:	c8 84       	ldd	r12, Y+8	; 0x08
    2108:	df 80       	ldd	r13, Y+7	; 0x07
    210a:	ee 80       	ldd	r14, Y+6	; 0x06
    210c:	fd 80       	ldd	r15, Y+5	; 0x05
    210e:	0c 81       	ldd	r16, Y+4	; 0x04
    2110:	1b 81       	ldd	r17, Y+3	; 0x03
    2112:	aa 81       	ldd	r26, Y+2	; 0x02
    2114:	b9 81       	ldd	r27, Y+1	; 0x01
    2116:	ce 0f       	add	r28, r30
    2118:	d1 1d       	adc	r29, r1
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	ed 01       	movw	r28, r26
    2126:	08 95       	ret

00002128 <_exit>:
    2128:	f8 94       	cli

0000212a <__stop_program>:
    212a:	ff cf       	rjmp	.-2      	; 0x212a <__stop_program>
